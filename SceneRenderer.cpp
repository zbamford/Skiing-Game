//
//  MyGeometries.cpp - Fall 2022
//
//   Sets up and renders 
//     - the ground plane, and
//     - the surface of rotation
//   for the Math 155A project #6.
//


// Use the static library (so glew32.dll is not needed):
#define GLEW_STATIC
#include <GL/glew.h> 
#include <GLFW/glfw3.h>

#include "LinearR3.h"		// Adjust path as needed.
#include "LinearR4.h"		// Adjust path as needed.
#include "MathMisc.h"       // Adjust path as needed

#include "SceneRenderer.h"
#include "FinalProject.h"
#include "PhongData.h"
#include "RgbImage.h"
#include "GlGeomCylinder.h"
#include "GlGeomCone.h"
#include "GlGeomSphere.h"

// **********************************
// Material to underlie a texture map.
// YOU MAY DEFINE A SECOND ONE OF THESE IF YOU WISH
// **********************************
phMaterial materialUnderTexture;

// **************************
// Information for loading textures
// **************************
const int NumTextures = 6;
unsigned int TextureNames[NumTextures];     // Texture names generated by OpenGL
const char* TextureFiles[NumTextures] = {
    "resources/bark.bmp",
    "resources/oak_log.bmp",
    "resources/leaves3.bmp",
    "resources/snow.bmp",
    "resources/red.bmp",
    "resources/blue.bmp"
};

// Initialize shapes
GlGeomCylinder cylinders(meshRes, meshRes, meshRes);
GlGeomCone cones(meshRes, meshRes, meshRes);
GlGeomSphere spheres(meshRes, meshRes);

const int treeCount = 100;

// Initialize RNG
int random[1000];

// Animation stuff 
//double animateIncrement = 0.01;   // Make bigger to speed up animation, smaller to slow it down.
//double currentTime = 0.0;         // Current "time" for the animation.

// ************************
// General data helping with setting up VAO (Vertex Array Objects)
//    and Vertex Buffer Objects.
// ***********************
const int NumObjects = 3;
const int iFloor = 0;
const int iLeaf = 1;
const int iWall = 2;            // RESERVED FOR USE BY 155A PROJECT

unsigned int myVBO[NumObjects];  // a Vertex Buffer Object holds an array of data
unsigned int myVAO[NumObjects];  // a Vertex Array Object - holds info about an array of vertex data;
unsigned int myEBO[NumObjects];  // a Element Array Buffer Object - holds an array of elements (vertex indices)

// Sets up RNG for tree generation, called only once
void setupRNG() {
    srand(time(NULL));
    for (int i = 0; i < 1000; i++) {
        random[i] = rand();
    }
}

// ********************************************
// This sets up for texture maps. It is called only once
// ********************************************
void SetupForTextures()
{
    // This material goes under the textures.
    // IF YOU WISH, YOU MAY DEFINE MORE THAN ONE OF THESE FOR DIFFERENT GEOMETRIES
    materialUnderTexture.SpecularColor.Set(0.9, 0.9, 0.9);
    materialUnderTexture.AmbientColor.Set(0.3, 0.3, 0.3);
    materialUnderTexture.DiffuseColor.Set(0.7, 0.7, 0.7);       // Increase or decrease to adjust brightness
    materialUnderTexture.SpecularExponent = 40.0;

    // ***********************************************
    // Load texture maps
	// ***********************************************
    RgbImage texMap;

    glUseProgram(shaderProgramBitmap);
    glActiveTexture(GL_TEXTURE0);
    glGenTextures(NumTextures, TextureNames);
    for (int i = 0; i < NumTextures; i++) {
        texMap.LoadBmpFile(TextureFiles[i]);            // Read i-th texture from the i-th file.
        glBindTexture(GL_TEXTURE_2D, TextureNames[i]);  // Bind (select) the i-th OpenGL texture

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

        // Set best quality filtering.   Also see below for disabling mipmaps.
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);  // Requires that mipmaps be generated (see below)
        // You may also try GL_LINEAR_MIPMAP_NEAREST -- try looking at the wall from a 30 degree angle, and look for sweeping transitions.

        // Store the texture into the OpenGL texture named TextureNames[i]
        int textureWidth = texMap.GetNumCols();
        int textureHeight = texMap.GetNumRows();
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, texMap.ImageData());
 #if 1
        // Use mipmaps  (Best!)
        glGenerateMipmap(GL_TEXTURE_2D);
#else
        // Don't use mipmaps.  Try moving away from the brick wall a great distance
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
#endif

    }

    // Make sure that the shaderProgramBitmap uses the GL_TEXTURE_0 texture.
    glUseProgram(shaderProgramBitmap);
    glUniform1i(glGetUniformLocation(shaderProgramBitmap, "theTextureMap"), 0);
    glActiveTexture(GL_TEXTURE0);

    setupRNG();
}

void MySetupSurfaces() {

    cylinders.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    cones.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    spheres.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);

    // Initialize the VAO's, VBO's and EBO's for the ground plane, the back wall
    // and the surface of rotation. Gives them the "vertPos" location,
    // and the "vertNormal"  and the "vertTexCoords" locations in the shader program.
    // No data is loaded into the VBO's or EBO's for the circular surface until the "Remesh"
    //   routines is called

    glGenVertexArrays(NumObjects, &myVAO[0]);
    glGenBuffers(NumObjects, &myVBO[0]);
    glGenBuffers(NumObjects, &myEBO[0]);

    // For the Floor:
    // Allocate the needed Vertex Array Objects (VAO's),
    //      Vertex Buffer Objects (VBO's) and Element Array Buffer Objects (EBO's)
    // Since the floor has only four vertices.  Each vertex stores its
    //    position, its normal (0,1,0) and its (s,t)-coordinates.
    // YOU DO NOT NEED TO REMESH THE FLOOR (OR THE BACK WALL) SINCE WE USE PHONG INTERPOLATION
    float floorVerts[] = {
        // Position              // Normal                  // Texture coordinates
        -20.0f, 0.0f, -35.0f,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
         20.0f, 0.0f, -35.0f,      0.0f, 1.0f, 0.0f,          1.0f, 1.0f,         // Back right
         20.0f, 0.0f,  20.0f,      0.0f, 1.0f, 0.0f,          1.0f, 0.0f,         // Front right
        -20.0f, 0.0f,  20.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };
    unsigned int floorElts[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iFloor]);
    glBindVertexArray(myVAO[iFloor]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(floorVerts), floorVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3*sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iFloor]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(floorElts), floorElts, GL_STATIC_DRAW);
}

void renderTrunk(float x, float z, float xPos, float zPos) {
    LinearMapR4 mat = viewMatrix;
    float matEntries[16];
    float xActual = x + xPos;
    float zActual = z + zPos;

    mat.Mult_glTranslate(xActual, 5.0f, zActual);
    mat.Mult_glScale(0.5, 5.0, 0.5);
    mat.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]); 
    glUniform1i(applyTextureLocation, true);           
    cylinders.RenderSide();                          

    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    cylinders.RenderTop();
    cylinders.RenderBase();
}

void renderLeaves(float x, float z, float xPos, float zPos) {
    LinearMapR4 mat = viewMatrix;
    float matEntries[16];
    float xActual = x + xPos;
    float zActual = z + zPos;

    mat.Mult_glTranslate(xActual, 6.0f, zActual);
    mat.Mult_glScale(2.5, 8.0, 2.5);
    mat.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    glUniform1i(applyTextureLocation, true);
    cones.RenderSide();
    cones.RenderBase();
}

void renderTree(float x, float z, float xPos, float zPos) {
    renderTrunk(x, z, xPos, zPos);
    renderLeaves(x, z, xPos, zPos);
}

std::vector<std::pair<float, float>> randomTreeGen(float xPos, float zPos) {
    float x = -10.0f;
    float z = -5.0f;
    int i = 0;
    std::vector<std::pair<float, float>> locs;
    locs.reserve(treeCount);

    while (i < treeCount) {
        x += random[i] % 10;
        locs.push_back(make_pair(x, z));
        i++;
        while (x < 5.0f && i < treeCount) {
            x += random[i] % 10 + 5.0f;
            i++;
            locs.push_back(make_pair(x, z));
        }
        x = -15.0f;
        z -= 5.0f;
    }
    return locs;
}

void renderSkier() {
    LinearMapR4 mat;
    float matEntries[16];

    // LEFT LEG
    mat = viewMatrix;
    mat.Mult_glTranslate(-2.0, 0.5, 0.0);
    mat.Mult_glScale(0.3, 0.5, 0.3);
    mat.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);
    glUniform1i(applyTextureLocation, true);
    cylinders.Render();

    // RIGHT LEG
    mat = viewMatrix;
    mat.Mult_glTranslate(-1.0, 0.5, 0.0);
    mat.Mult_glScale(0.3, 0.5, 0.3);
    mat.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);
    glUniform1i(applyTextureLocation, true);
    cylinders.Render();

    // BODY
    mat = viewMatrix;
    mat.Mult_glTranslate(-1.5, 2.0, 0.0);
    mat.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);
    glUniform1i(applyTextureLocation, true);
    cylinders.Render();

    // HEAD
    mat = viewMatrix;
    mat.Mult_glTranslate(-1.5, 3.0, 0.0);
    mat.Mult_glScale(1.0);
    mat.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);
    glUniform1i(applyTextureLocation, true);
    spheres.Render();

    // BACKPACK
    mat = viewMatrix;
    mat.Mult_glTranslate(-1.5, 2.0, 1.0);
    mat.Mult_glScale(0.7, 1.0, 0.4);
    mat.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);
    glUniform1i(applyTextureLocation, true);
    spheres.Render();

    // LEFT SKI
    mat = viewMatrix;
    mat.Mult_glTranslate(-2.0, 0.1, 0.0);
    mat.Mult_glScale(0.2, 0.1, 3.0);
    mat.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);
    glUniform1i(applyTextureLocation, true);
    spheres.Render();

    // RIGHT SKI
    mat = viewMatrix;
    mat.Mult_glTranslate(-1.0, 0.1, 0.0);
    mat.Mult_glScale(0.2, 0.1, 3.0);
    mat.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);
    glUniform1i(applyTextureLocation, true);
    spheres.Render();
}

// **********************************************
// MODIFY THIS ROUTINE TO RENDER THE FLOOR, THE BACK WALL,
//    AND THE SPHERES AND THE CYLINDER. -- WITH TEXTURES
// **********************************************

std::vector<std::pair<float, float>> RenderScene(float xPos, float zPos) {

    float matEntries[16];       // Temporary storage for floats
    // ******
    // Render the Floor - using a procedural texture map
    // ******
    selectShaderProgram(shaderProgramBitmap);
    glBindTexture(GL_TEXTURE_2D, TextureNames[3]);
    glBindVertexArray(myVAO[iFloor]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);    
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    // ************ 
    // Render the back wall
    //  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
    //  BUT USE A BITMAP (shaderProgramBitmap) INSTEAD OF A PROCEDURAL TEXTURE.
    selectShaderProgram(shaderProgramBitmap);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the wall as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    std::vector<std::pair<float, float>> locs = randomTreeGen(xPos, zPos);
    std::pair<float, float> loc;
    for (int i = 0; i < locs.size(); i++) {
        loc = locs[i];
        renderTree(loc.first, loc.second, xPos, zPos);
    }
    renderSkier();

    return locs;
}

